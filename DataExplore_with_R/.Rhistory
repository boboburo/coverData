coverData<-coverData[,testWA := NULL]
coverData<-coverData[,testST := NULL]
#Check for mutually exclusive columns
coverData<-coverData[, testWA := rowSums(.SD), .SDcols = 11:14]
coverData<-coverData[,testST := rowSums(.SD), .SDcols = 15:54]
coverData[testWA>1,]  #zero returned
coverData[testST>1,]  #zero returned
sum(coverData$testWA)==nrow(coverData)  #True
sum(coverData$testST)==nrow(coverData)  #True
#Drop the colums
coverData<-coverData[,testWA := NULL]
coverData<-coverData[,testST := NULL]
#Reduce the two binary variable to original state with variables and encode the coverType variable with original labels.
#Recode coverType with character labels for exploratory analysis.
metaData <- data.table(read.xlsx(theFile,sheetName = "targetName"))
setkeyv(coverData,"coverType")
setkeyv(metaData,"value")
coverData <- coverData[metaData,coverType2:=i.newLabel]
coverData <- coverData[,coverType:=NULL]
setnames(coverData,"coverType2","coverType")
#Read in the labels for Wilderness Area and use for loop to update the data.table
metaData <-data.table(read.xlsx(theFile, sheetName = "wildernessArea"))
for(i in 1:nrow(metaData)) {
refColumn<-as.character(metaData[i,dbName])
refValue<-as.character(metaData[i,newLabel])
coverData<-coverData[get(refColumn)==1,wildernessArea:=refValue]
}
#Read in the labels for Wilderness Area and use for loop to update the data.table
metaData <-data.table(read.xlsx(theFile, sheetName = "soilType"))
for(i in 1:nrow(metaData)) {
refColumn<-as.character(metaData[i,dbName])
refValue<-as.character(metaData[i,newLabel])
coverData<-coverData[get(refColumn)==1,soilType:=refValue]
}
#remove the binary columns
coverData <- coverData[ , colnames(coverData[,11:54,with=FALSE]):=NULL]
#Add some additional information contained about soil type.
setkeyv(coverData,"soilType")
setkeyv(metaData,"newLabel")
coverData<-coverData[metaData,climaticZone :=i.climatic.zone]
coverData<-coverData[metaData,geologicZone :=i.geologic.zones]
#reorder the columns
colOrder<-c("Elevation","Aspect","Slope","HD.Hydro","VD.Hydro","HD.Road","HD.Fire","HS.9am","HS.noon","HS.3pm","wildernessArea","soilType","climaticZone","geologicZone","coverType")
setcolorder(coverData, colOrder)
#Remove some variables
rm(i,colOrder,refColumn,refValue,metaData,theFile,colNames)
#summaryTable to gather statistics.
summaryTable<-data.table(name=names(coverData))
#May add description here?
summaryTable<-summaryTable[,dataType:= sapply(coverData,class)]
summaryTable<-summaryTable[,missing := t(coverData[,lapply(.SD,function(x) length(which(is.na(x))))]),]
summaryTable<-summaryTable[,unique :=  t(coverData[,lapply(.SD,function(x) length(unique(x)))]),]
integerCols<-summaryTable[dataType=="integer",name]
categoricalCols<-summaryTable[dataType!="integer",name]
tempCoverData<-coverData[,integerCols,with=FALSE]
intSummary<-data.table(name=names(tempCoverData))
measuredIn<-c("meters","azimuth","degrees","meters","meters","meters","meters","0-255","0-255","0-255")
intSummary<-intSummary[,quantity := measuredIn]
intSummary<-intSummary[,min :=  t(tempCoverData[,lapply(.SD,function(x) min(x))]),]
intSummary<-intSummary[,max :=  t(tempCoverData[,lapply(.SD,function(x) max(x))]),]
intSummary<-intSummary[,mean :=  t(tempCoverData[,lapply(.SD,function(x) round(mean(x),2))]),]
intSummary<-intSummary[,std :=  t(tempCoverData[,lapply(.SD,function(x) round(sd(x),2))]),]
summaryTable<-merge(summaryTable,intSummary,by="name",all=TRUE,sort=FALSE)
#summaryTable[is.na(summaryTable)] <- " "
mytable<-data.frame(summaryTable)
tab_nums("sumTab","Summary of CoverTye Dataset Featuers")
pandoc.table(mytable,caption=tab_nums("sumTab"),justify=c("left"),missing="")
#tempTable using dplyr
coverType.cnt = coverData %>%
group_by(coverType) %>%
summarise(count=n()) %>%
mutate(pct=count/sum(count))
plot<-ggplot(coverType.cnt, aes(x=coverType, y=count)) +
geom_bar(stat="identity") +
scale_y_continuous(labels=comma) +
geom_text(data=coverType.cnt, aes(label=count,y=count+30000),size=3) +
geom_text(data=coverType.cnt, aes(label=paste0(round(pct*100,1),"%"),y=count+10000),size=3) +
theme_adMobile()
fig_nums("countCT","Distribution of coverType")
plot+ggtitle(eval(fig_nums("countCT")))
plot<-ggcorr(coverData[,1:10,with=FALSE], label = TRUE, label_size = 3, label_round = 2, label_alpha = TRUE, hjust = 00.75, size = 3,layout.exp = 1)
fig_nums("corrTen","Correlation Matrix of 10 Numerical Features")
plot+ggtitle(eval(fig_nums("corrTen")))
temp<-sample_n(coverData,10000)
ggscatmat(temp, columns = 1:10, alpha=0.8)
ggplot(diamonds, aes(carat, price))+ geom_point(alpha = 1/10)
ggplot(diamonds, aes(carat, price))+ geom_point(alpha = 1/10)+theme_adMobile()
ggplot(coverData, aes(HS.9am, HS.noon))+ geom_point(alpha = 1/10)+theme_adMobile()
sccatterTemp<-sample_n(coverData,10000)
ggplot(scatterTemp, aes(HS.9am, HS.noon))+ geom_point(alpha = 1/10)+theme_adMobile()
rm(sccatterTemp)
scatterTemp<-sample_n(coverData,10000)
ggplot(scatterTemp, aes(HS.9am, HS.noon))+ geom_point(alpha = 1/10)+theme_adMobile()
ggplot(scatterTemp, aes(HS.9am, HS.noon))+ geom_point(alpha = 1/10,aes(colour = factor(coverType))+theme_adMobile()
ggplot(scatterTemp, aes(HS.9am, HS.noon))+ geom_point(alpha = 1/10,aes(colour = factor(coverType)))+theme_adMobile()
ggplot(scatterTemp, aes(HS.9am, HS.noon))+ geom_point(alpha = 1/10)+theme_adMobile()
corrFeature1<-c("HS.9am","HD.Fire","HD.Hydro","Slope","Aspect","Aspect")
corrFeature2<-c("HS.Noon","HS.Noon","VD.Hydro","HS.9am","HD.Fire","HS.Noon")
scatterTemp<-sample_n(coverData,10000)
p=list()
for(i in 1:length(corrFeature1)){
p[[i]] <- ggplot(scatterTemp, aes_string(x=corrFeature1[i],y=corrFeature2[i])) +
geom_point(alph=1/10) +
theme_adMobile()
}
fig_nums("boxNumeric","Boxplot of Numeric Data - coverType")
p=list()
for(i in 1:length(corrFeature1)){
p[[i]] <- ggplot(scatterTemp, aes_string(x=corrFeature1[i],y=corrFeature2[i])) +
geom_point(alpha=1/10) +
theme_adMobile()
}
fig_nums("boxNumeric","Boxplot of Numeric Data - coverType")
do.call(grid.arrange,c(p,top=eval(fig_nums("boxNumeric"))))
corrFeature1<-c("HS.9am","HD.Fire","HD.Hydro","Slope","Aspect","Aspect")
corrFeature2<-c("HS.noon","HS.noon","VD.Hydro","HS.9am","HD.Fire","HS.Noon")
scatterTemp<-sample_n(coverData,10000)
p=list()
for(i in 1:length(corrFeature1)){
p[[i]] <- ggplot(scatterTemp, aes_string(x=corrFeature1[i],y=corrFeature2[i])) +
geom_point(alpha=1/10) +
theme_adMobile()
}
fig_nums("boxNumeric","Boxplot of Numeric Data - coverType")
do.call(grid.arrange,c(p,top=eval(fig_nums("boxNumeric"))))
corrFeature1<-c("HS.9am","HD.Fire","HD.Hydro","Slope","Aspect","Aspect")
corrFeature2<-c("HS.noon","HS.noon","VD.Hydro","HS.9am","HD.Fire","HS.noon")
scatterTemp<-sample_n(coverData,10000)
p=list()
for(i in 1:length(corrFeature1)){
p[[i]] <- ggplot(scatterTemp, aes_string(x=corrFeature1[i],y=corrFeature2[i])) +
geom_point(alpha=1/10) +
theme_adMobile()
}
fig_nums("boxNumeric","Boxplot of Numeric Data - coverType")
do.call(grid.arrange,c(p,top=eval(fig_nums("boxNumeric"))))
head(coverData)
soilType.cnt = coverData %>%
group_by(soilType) %>%
summarise(count=n()) %>%
mutate(pct=count/sum(count))
plot1<-ggplot(soilType.cnt, aes(x=reorder(soilType, -count), y=count)) +
geom_bar(stat="identity") +
xlab("soilType") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.text.x=element_text(size=6))
plot1
categoricalCols
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
}
categoricalCols<-c("wildernessArea","soilType","climaticZone","geologicZone")
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
}
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
#tempTable using dplyr
categoryCount = coverData %>%
group_by(get(categoryCount[i])) %>%
summarise(count=n())
print nrow(categoryCount)
}
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
#tempTable using dplyr
categoryCount = coverData %>%
group_by(get(categoryCount[i])) %>%
summarise(count=n())
print (nrow(categoryCount))
}
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
#tempTable using dplyr
categoryCount <- coverData %>%
group_by(get(categoryCount[i])) %>%
summarise(count=n())
print (nrow(categoryCount))
}
categoryCount <- coverData %>%
group_by(get(categoryCount[2])) %>%
summarise(count=n())
#tempTable using dplyr
categoryCount <- coverData %>%
group_by(get(categoryCols[2])) %>%
summarise(count=n())
#tempTable using dplyr
categoryCount <- coverData %>%
group_by(get(categoricalCols[2])) %>%
summarise(count=n())
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
#tempTable using dplyr
categoryCount <- coverData %>%
group_by(get(categoricalCols[i])) %>%
summarise(count=n())
print (nrow(categoryCount))
}
#tempTable using dplyr
categoryCount <- coverData %>%
group_by(get(categoricalCols[2])) %>%
summarise(count=n())
categoryCount
setnames(categoryCount,c(categoryCount[i],"count"))
setnames(categoryCount,categoryCount[i],"count"))
setnames(categoryCount,categoryCount[i],"count")
setnames(categoryCount,eval(categoryCount[i]),"count")
class(categoryCount)
categoryCount
names(categoryCount)
for (i in 1:length(categoricalCols)){
print(categoricalCols[i])
#tempTable using dplyr
categoryCount <- coverData %>%
group_by(get(categoricalCols[i])) %>%
summarise(count=n())
print (nrow(categoryCount))
}
names(categoryCount)
ggplot(categoryCount, aes(x=reorder("get(categoricalCols[i])", -count), y=count)) +
geom_bar(stat="identity")
ggplot(categoryCount, aes(x=reorder(get(categoricalCols[i]), -count), y=count)) +
geom_bar(stat="identity")
categoryCount <- coverData %>%
group_by(eval(categoricalCols[i])) %>%
summarise(count=n())
head(categoryCount)
categoryCount <- coverData %>%
group_by(get(categoricalCols[i])) %>%
summarise(count=n())
head(categoryCount)
eval(categoricalCols[i])
setnames(categoryCount,"get(categoricalCols[i])",eval(categoricalCols[i]))
head(categoryCount)
ggplot(categoryCount, aes(x=reorder(eval(categoricalCols[i]), -count), y=count)) +
geom_bar(stat="identity")
ggplot(categoryCount, aes(x=reorder(geologicalZone, -count), y=count)) +
geom_bar(stat="identity")
head(categoryCount)
ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity")
ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab(eval(categoricalCols[i]))
ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab(eval(categoricalCols[i])) +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.text.x=element_text(size=6))
categoryCount <- coverData %>%group_by(wildernessArea) %>% summarise(count=n())
p1 <- ggplot(categoryCount, aes(x=reorder(wildernessArea, -count), y=count)) + geom_bar(stat="identity")
o1
p1
p1 <- ggplot(categoryCount, aes(x=reorder(wildernessArea, -count), y=count)) +
geom_bar(stat="identity") +
xlab("wildernesArea") +
scale_y_continuous(labels=comma) +
theme(panel.background = element_blank())
p1
categoryCount <- coverData %>%group_by(soilType) %>% summarise(count=n())
p2 <- ggplot(categoryCount, aes(x=reorder(soilType, -count), y=count)) +
geom_bar(stat="identity") +
xlab("soilType") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.text.x=element_text(size=6))
p2
categoryCount <- coverData %>%group_by(climaticZone) %>% summarise(count=n())
p3 <- ggplot(categoryCount, aes(x=reorder(climaticZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("climaticZone") +
scale_y_continuous(labels=comma) +
theme(panel.background = element_blank())
p3
categoryCount <- coverData %>%group_by(climaticZone) %>% summarise(count=n())
p3 <- ggplot(categoryCount, aes(x=reorder(climaticZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("climaticZone") +
scale_y_continuous(labels=comma) +
theme_adMobilei()
categoryCount <- coverData %>%group_by(climaticZone) %>% summarise(count=n())
p3 <- ggplot(categoryCount, aes(x=reorder(climaticZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("climaticZone") +
scale_y_continuous(labels=comma) +
theme_adMobile()
p3
categoryCount <- coverData %>%group_by(geologicZone) %>% summarise(count=n())
p3 <- ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("geologicZone") +
scale_y_continuous(labels=comma) +
theme_adMobile()
categoryCount <- coverData %>%group_by(geologicZone) %>% summarise(count=n())
p4 <- ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("geologicZone") +
scale_y_continuous(labels=comma) +
theme_adMobile()
p4
p1
p2
p3
p4
p1
p2
p3
p4
p1
p2
#Create four seperate plots and arrange
categoricalCols<-c("wildernessArea","soilType","climaticZone","geologicZone")
#Create row counts using dplyr
categoryCount <- coverData %>%group_by(wildernessArea) %>% summarise(count=n())
p1 <- ggplot(categoryCount, aes(x=reorder(wildernessArea, -count), y=count)) +
geom_bar(stat="identity") +
xlab("wildernesArea") +
scale_y_continuous(labels=comma) +
theme(panel.background = element_blank())
categoryCount <- coverData %>%group_by(soilType) %>% summarise(count=n())
p2 <- ggplot(categoryCount, aes(x=reorder(soilType, -count), y=count)) +
geom_bar(stat="identity") +
xlab("soilType") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.text.x=element_text(size=6))
categoryCount <- coverData %>%group_by(climaticZone) %>% summarise(count=n())
p3 <- ggplot(categoryCount, aes(x=reorder(climaticZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("climaticZone") +
scale_y_continuous(labels=comma) +
theme_adMobile()
#Create row counts using dplyr
categoryCount <- coverData %>%group_by(geologicZone) %>% summarise(count=n())
p4 <- ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("geologicZone") +
scale_y_continuous(labels=comma) +
theme_adMobile()
fig_nums("category4","Row Counts of Categorioal Features")
grid.arrange(p1,p2,p3,p4,ncol=2,top=eval(fig_nums("category4")))
#Create four seperate plots and arrange
categoricalCols<-c("wildernessArea","soilType","climaticZone","geologicZone")
#Create row counts using dplyr
categoryCount <- coverData %>%group_by(wildernessArea) %>% summarise(count=n())
p1 <- ggplot(categoryCount, aes(x=reorder(wildernessArea, -count), y=count)) +
geom_bar(stat="identity") +
xlab("wildernesArea") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.title.y=element_blank())
categoryCount <- coverData %>%group_by(soilType) %>% summarise(count=n())
p2 <- ggplot(categoryCount, aes(x=reorder(soilType, -count), y=count)) +
geom_bar(stat="identity") +
xlab("soilType") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.text.x=element_text(size=6),axis.title.y=element_blank())
categoryCount <- coverData %>%group_by(climaticZone) %>% summarise(count=n())
p3 <- ggplot(categoryCount, aes(x=reorder(climaticZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("climaticZone") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.title.y=element_blank())
#Create row counts using dplyr
categoryCount <- coverData %>%group_by(geologicZone) %>% summarise(count=n())
p4 <- ggplot(categoryCount, aes(x=reorder(geologicZone, -count), y=count)) +
geom_bar(stat="identity") +
xlab("geologicZone") +
scale_y_continuous(labels=comma) +
theme_adMobile() +
theme(axis.title.y=element_blank())
fig_nums("category4","Row Counts of Categorioal Features")
grid.arrange(p1,p2,p3,p4,ncol=2,top=eval(fig_nums("category4")))
a<-c("yes","yes","yes","yes","no",NA,"no")
b<-c("yes","yes",NA,NA,"no",NA,"no")
c<-c(15,40,34,24,NA,NA,10)
d<-c("experienced","fresher","experienced","fresher",NA,"fresher","experienced")
e<-("qualified","qualified","qualified",NA,"qualified",NA,"disqualified")
f<-(NA,NA,NA,NA,NA,1,NA)
g<-(1,0,1,1,0,1,1)
data<-data.frame(cbind(a,b,c,d,e,f,g))
a<-c("yes","yes","yes","yes","no",NA,"no")
b<-c("yes","yes",NA,NA,"no",NA,"no")
c<-c(15,40,34,24,NA,NA,10)
d<-c("experienced","fresher","experienced","fresher",NA,"fresher","experienced")
e<-("qualified","qualified","qualified",NA,"qualified",NA,"disqualified")
e<-c("qualified","qualified","qualified",NA,"qualified",NA,"disqualified")
f<-(NA,NA,NA,NA,NA,1,NA)
f<-c(NA,NA,NA,NA,NA,1,NA)
g<-c(1,0,1,1,0,1,1)
data<-data.frame(cbind(a,b,c,d,e,f,g))
library('FSelector')
res <- gain.ratio(g~., data)
res
res2<-gain.ratio(coverType~.coverData)
head(coverData)
class(coverData$coverType)
res2<-gain.ratio(coverType~. ,coverData)
res2
data(houseVotes84)
library(mlbench)
data(HouseVotes84)
install.packages("mlbench")
library(mlbench)
data(HouseVotes84)
head(HouseVotes84)
oneRres <- oneR(coverType~. ,coverData)  #simple association rules involving only one attribute in condition part.
oneRes
oneRres
chiSquare <- chi.squared(coverType~. ,coverData) #discrte
chiSquare
rf<- random.forest.importance(coverType~. ,coverData, importance.type = 1) #1=mean decrease in accuracy, discrete
rf
library(caret)
trainIndex <- createDataPartition(coverData$coverType, p = .1,list = FALSE,times = 1)
head(trainIndex)
irisTrain <- coverData[ trainIndex,]
irisTest  <- coverData[-trainIndex,]
table(irisTrain$coverType)
table(irisTest$coverType)
190656/522908
21884/58104
8543/522908
950/58104
weightDF1<-data.table(chiSquare)
weigthDF1
weightDF1
weightDF1<-as.data.table(chiSquare)
weightDF1
chiSquare
str(chiSquare)
chiSquare$features <- row.names(chiSquare)
chiSquare
colnames(chiSquare)[1] <- "chi.square"
chiSquare
chiSquare2 <= chiSquare[with(chiSquare, order(-"chi.square")), ]
chiSquare2 <- chiSquare[with(chiSquare, order(-"chi.square")), ]
chiSquare2 <- chiSquare[with(chiSquare, order(-chi.square)), ]
chiSquare2
sampleIndex <- createDataPartition(coverData$coverType, p = .1,list = FALSE,times = 1)
rf<- random.forest.importance(coverType~. ,coverData[ sampleIndex,], importance.type = 1) #1=mean decrease in accuracy, discrete target
rf
library(mlbench)
data(HouseVotes84)
weights <- random.forest.importance(Class~., HouseVotes84, importance.type = 1)
print(weights)
subset <- cutoff.k(weights, 5)
subset
rf$features <- row.names(rf)
colnames(rf)[1] <- "random.forest"
rf <- rf[with(rf, order(-random.forest)), ]
rf
rf
rf$random.forest<-rf$random.forest/100
rf
paste(round(100*m, 2), "%", sep="")
m=2
paste(round(100*m, 2), "%", sep="")
paste(round(100*rf$random.forest, 2), "%", sep="")
rf$random.forest<-round(rf$random.forest,2)
rf
chi.squared()
chiSquare
chiSquare$chi.square <- round(chiSquare$chi.square,2)
chiSquare
chiSquare <- chi.squared(coverType~. ,coverData) #discrete target
chiSquare$features <- row.names(chiSquare)
colnames(chiSquare)[1] <- "chi.square"
chiSquare$chi.square <- round(chiSquare$chi.square,3)
chiSquare <- chiSquare[with(chiSquare, order(-chi.square)), ]
chiSquare
rf<- random.forest.importance(coverType~. ,coverData[ sampleIndex,], importance.type = 1) #1=mean decrease in accuracy, discrete target
rf$features <- row.names(rf)
colnames(rf)[1] <- "random.forest"
rf$random.forest<-round(rf$random.forest/100,3)
rf <- rf[with(rf, order(-random.forest)), ]
rf
colnames(rf)[2] <- "features2"
rf
chiSquare <- chi.squared(coverType~. ,coverData) #discrete target
chiSquare$features1 <- row.names(chiSquare)
colnames(chiSquare)[1] <- "chi.square"
chiSquare$chi.square <- round(chiSquare$chi.square,3)
chiSquare <- chiSquare[with(chiSquare, order(-chi.square)), ]
all<-bind_cols(chiSquare,rf)
all
twoFI<-bind_cols(chiSquare,rf)
names(twoFI)
colOrder<-c("features1","chi.square","feature2","random.forest")
setcolorder(twoFI, colOrder)
colOrder<-c("features1","chi.square","features2","random.forest")
setcolorder(twoFI, colOrder)
twoFI
write.csv(twoFI, file = "featureImportance_coverData.csv")
featureImport<-read.csv(file="featureImportance_coverData.csv",header=TRUE)
tab_nums("featureImportTab","Feature Importance (chi,randomForest) of CoverTye Dataset Featuers")
pandoc.table(mytable,caption=tab_nums("sumTab"),justify=c("left"),missing="")
mytable<-read.csv(file="featureImportance_coverData.csv",header=TRUE)
pandoc.table(mytable,caption=tab_nums("sumTab"),justify=c("left"),missing="")
write.csv(twoFI, file = "featureImportance_coverData.csv",row.names=FALSE)
mytable<-read.csv(file="featureImportance_coverData.csv",header=TRUE)
tab_nums("featureImportTab","Feature Importance (chi,randomForest) of CoverTye Dataset Featuers")
pandoc.table(mytable,caption=tab_nums("sumTab"),justify=c("left"),missing="")
ncol(coverData)
theFile="/Users/briancarter1/Desktop/OneDrive/PublicData/AM/v2/covdata15.csv"
write.csv(coverData,file=theFile,row.names=FALSE)
install.packages("ggthemes")
install.packages("rPython")
